/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.LoginMessage', null, global);
goog.exportSymbol('proto.LoginMessage.EmailLoginMessage', null, global);
goog.exportSymbol('proto.LoginMessage.FacebookLoginMessage', null, global);
goog.exportSymbol('proto.RegisterMessage', null, global);
goog.exportSymbol('proto.RegisterMessage.EmailRegisterMessage', null, global);
goog.exportSymbol('proto.RegisterMessage.FacebookRegisterMessage', null, global);
goog.exportSymbol('proto.RegisterVerifyCheckMessage', null, global);
goog.exportSymbol('proto.RegisterVerifyMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.LoginMessage.oneofGroups_);
};
goog.inherits(proto.LoginMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginMessage.displayName = 'proto.LoginMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.LoginMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.LoginMessage.LoginmethodCase = {
  LOGINMETHOD_NOT_SET: 0,
  EMAILLOGIN: 1,
  FACEBOOKLOGIN: 2
};

/**
 * @return {proto.LoginMessage.LoginmethodCase}
 */
proto.LoginMessage.prototype.getLoginmethodCase = function() {
  return /** @type {proto.LoginMessage.LoginmethodCase} */(jspb.Message.computeOneofCase(this, proto.LoginMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    emaillogin: (f = msg.getEmaillogin()) && proto.LoginMessage.EmailLoginMessage.toObject(includeInstance, f),
    facebooklogin: (f = msg.getFacebooklogin()) && proto.LoginMessage.FacebookLoginMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginMessage}
 */
proto.LoginMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginMessage;
  return proto.LoginMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginMessage}
 */
proto.LoginMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LoginMessage.EmailLoginMessage;
      reader.readMessage(value,proto.LoginMessage.EmailLoginMessage.deserializeBinaryFromReader);
      msg.setEmaillogin(value);
      break;
    case 2:
      var value = new proto.LoginMessage.FacebookLoginMessage;
      reader.readMessage(value,proto.LoginMessage.FacebookLoginMessage.deserializeBinaryFromReader);
      msg.setFacebooklogin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmaillogin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.LoginMessage.EmailLoginMessage.serializeBinaryToWriter
    );
  }
  f = message.getFacebooklogin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.LoginMessage.FacebookLoginMessage.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginMessage.EmailLoginMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginMessage.EmailLoginMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginMessage.EmailLoginMessage.displayName = 'proto.LoginMessage.EmailLoginMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginMessage.EmailLoginMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginMessage.EmailLoginMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginMessage.EmailLoginMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginMessage.EmailLoginMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginMessage.EmailLoginMessage}
 */
proto.LoginMessage.EmailLoginMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginMessage.EmailLoginMessage;
  return proto.LoginMessage.EmailLoginMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginMessage.EmailLoginMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginMessage.EmailLoginMessage}
 */
proto.LoginMessage.EmailLoginMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginMessage.EmailLoginMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginMessage.EmailLoginMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginMessage.EmailLoginMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginMessage.EmailLoginMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.LoginMessage.EmailLoginMessage.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LoginMessage.EmailLoginMessage.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.LoginMessage.EmailLoginMessage.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LoginMessage.EmailLoginMessage.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoginMessage.FacebookLoginMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoginMessage.FacebookLoginMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LoginMessage.FacebookLoginMessage.displayName = 'proto.LoginMessage.FacebookLoginMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoginMessage.FacebookLoginMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.LoginMessage.FacebookLoginMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoginMessage.FacebookLoginMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginMessage.FacebookLoginMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoginMessage.FacebookLoginMessage}
 */
proto.LoginMessage.FacebookLoginMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoginMessage.FacebookLoginMessage;
  return proto.LoginMessage.FacebookLoginMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoginMessage.FacebookLoginMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoginMessage.FacebookLoginMessage}
 */
proto.LoginMessage.FacebookLoginMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoginMessage.FacebookLoginMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoginMessage.FacebookLoginMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoginMessage.FacebookLoginMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoginMessage.FacebookLoginMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.LoginMessage.FacebookLoginMessage.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LoginMessage.FacebookLoginMessage.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EmailLoginMessage emailLogin = 1;
 * @return {?proto.LoginMessage.EmailLoginMessage}
 */
proto.LoginMessage.prototype.getEmaillogin = function() {
  return /** @type{?proto.LoginMessage.EmailLoginMessage} */ (
    jspb.Message.getWrapperField(this, proto.LoginMessage.EmailLoginMessage, 1));
};


/** @param {?proto.LoginMessage.EmailLoginMessage|undefined} value */
proto.LoginMessage.prototype.setEmaillogin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.LoginMessage.oneofGroups_[0], value);
};


proto.LoginMessage.prototype.clearEmaillogin = function() {
  this.setEmaillogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginMessage.prototype.hasEmaillogin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FacebookLoginMessage facebookLogin = 2;
 * @return {?proto.LoginMessage.FacebookLoginMessage}
 */
proto.LoginMessage.prototype.getFacebooklogin = function() {
  return /** @type{?proto.LoginMessage.FacebookLoginMessage} */ (
    jspb.Message.getWrapperField(this, proto.LoginMessage.FacebookLoginMessage, 2));
};


/** @param {?proto.LoginMessage.FacebookLoginMessage|undefined} value */
proto.LoginMessage.prototype.setFacebooklogin = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.LoginMessage.oneofGroups_[0], value);
};


proto.LoginMessage.prototype.clearFacebooklogin = function() {
  this.setFacebooklogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.LoginMessage.prototype.hasFacebooklogin = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterVerifyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterVerifyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterVerifyMessage.displayName = 'proto.RegisterVerifyMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterVerifyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterVerifyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterVerifyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterVerifyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterVerifyMessage}
 */
proto.RegisterVerifyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterVerifyMessage;
  return proto.RegisterVerifyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterVerifyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterVerifyMessage}
 */
proto.RegisterVerifyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterVerifyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterVerifyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterVerifyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterVerifyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.RegisterVerifyMessage.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RegisterVerifyMessage.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterVerifyCheckMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterVerifyCheckMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterVerifyCheckMessage.displayName = 'proto.RegisterVerifyCheckMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterVerifyCheckMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterVerifyCheckMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterVerifyCheckMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterVerifyCheckMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    verifynumber: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterVerifyCheckMessage}
 */
proto.RegisterVerifyCheckMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterVerifyCheckMessage;
  return proto.RegisterVerifyCheckMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterVerifyCheckMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterVerifyCheckMessage}
 */
proto.RegisterVerifyCheckMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifynumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterVerifyCheckMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterVerifyCheckMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterVerifyCheckMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterVerifyCheckMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVerifynumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string verifyNumber = 1;
 * @return {string}
 */
proto.RegisterVerifyCheckMessage.prototype.getVerifynumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RegisterVerifyCheckMessage.prototype.setVerifynumber = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RegisterMessage.oneofGroups_);
};
goog.inherits(proto.RegisterMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterMessage.displayName = 'proto.RegisterMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RegisterMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.RegisterMessage.RegistermethodCase = {
  REGISTERMETHOD_NOT_SET: 0,
  EMAILREGISTER: 1,
  FACEBOOKREGISTER: 2
};

/**
 * @return {proto.RegisterMessage.RegistermethodCase}
 */
proto.RegisterMessage.prototype.getRegistermethodCase = function() {
  return /** @type {proto.RegisterMessage.RegistermethodCase} */(jspb.Message.computeOneofCase(this, proto.RegisterMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    emailregister: (f = msg.getEmailregister()) && proto.RegisterMessage.EmailRegisterMessage.toObject(includeInstance, f),
    facebookregister: (f = msg.getFacebookregister()) && proto.RegisterMessage.FacebookRegisterMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterMessage}
 */
proto.RegisterMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterMessage;
  return proto.RegisterMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterMessage}
 */
proto.RegisterMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RegisterMessage.EmailRegisterMessage;
      reader.readMessage(value,proto.RegisterMessage.EmailRegisterMessage.deserializeBinaryFromReader);
      msg.setEmailregister(value);
      break;
    case 2:
      var value = new proto.RegisterMessage.FacebookRegisterMessage;
      reader.readMessage(value,proto.RegisterMessage.FacebookRegisterMessage.deserializeBinaryFromReader);
      msg.setFacebookregister(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmailregister();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RegisterMessage.EmailRegisterMessage.serializeBinaryToWriter
    );
  }
  f = message.getFacebookregister();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RegisterMessage.FacebookRegisterMessage.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterMessage.EmailRegisterMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterMessage.EmailRegisterMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterMessage.EmailRegisterMessage.displayName = 'proto.RegisterMessage.EmailRegisterMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterMessage.EmailRegisterMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterMessage.EmailRegisterMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterMessage.EmailRegisterMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterMessage.EmailRegisterMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterMessage.EmailRegisterMessage}
 */
proto.RegisterMessage.EmailRegisterMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterMessage.EmailRegisterMessage;
  return proto.RegisterMessage.EmailRegisterMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterMessage.EmailRegisterMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterMessage.EmailRegisterMessage}
 */
proto.RegisterMessage.EmailRegisterMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterMessage.EmailRegisterMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterMessage.EmailRegisterMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterMessage.EmailRegisterMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterMessage.EmailRegisterMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.RegisterMessage.EmailRegisterMessage.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RegisterMessage.EmailRegisterMessage.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.RegisterMessage.EmailRegisterMessage.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RegisterMessage.EmailRegisterMessage.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.RegisterMessage.EmailRegisterMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RegisterMessage.EmailRegisterMessage.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterMessage.FacebookRegisterMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterMessage.FacebookRegisterMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RegisterMessage.FacebookRegisterMessage.displayName = 'proto.RegisterMessage.FacebookRegisterMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterMessage.FacebookRegisterMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterMessage.FacebookRegisterMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterMessage.FacebookRegisterMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterMessage.FacebookRegisterMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterMessage.FacebookRegisterMessage}
 */
proto.RegisterMessage.FacebookRegisterMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterMessage.FacebookRegisterMessage;
  return proto.RegisterMessage.FacebookRegisterMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterMessage.FacebookRegisterMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterMessage.FacebookRegisterMessage}
 */
proto.RegisterMessage.FacebookRegisterMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterMessage.FacebookRegisterMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterMessage.FacebookRegisterMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterMessage.FacebookRegisterMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterMessage.FacebookRegisterMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.RegisterMessage.FacebookRegisterMessage.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RegisterMessage.FacebookRegisterMessage.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EmailRegisterMessage emailRegister = 1;
 * @return {?proto.RegisterMessage.EmailRegisterMessage}
 */
proto.RegisterMessage.prototype.getEmailregister = function() {
  return /** @type{?proto.RegisterMessage.EmailRegisterMessage} */ (
    jspb.Message.getWrapperField(this, proto.RegisterMessage.EmailRegisterMessage, 1));
};


/** @param {?proto.RegisterMessage.EmailRegisterMessage|undefined} value */
proto.RegisterMessage.prototype.setEmailregister = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.RegisterMessage.oneofGroups_[0], value);
};


proto.RegisterMessage.prototype.clearEmailregister = function() {
  this.setEmailregister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RegisterMessage.prototype.hasEmailregister = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FacebookRegisterMessage facebookRegister = 2;
 * @return {?proto.RegisterMessage.FacebookRegisterMessage}
 */
proto.RegisterMessage.prototype.getFacebookregister = function() {
  return /** @type{?proto.RegisterMessage.FacebookRegisterMessage} */ (
    jspb.Message.getWrapperField(this, proto.RegisterMessage.FacebookRegisterMessage, 2));
};


/** @param {?proto.RegisterMessage.FacebookRegisterMessage|undefined} value */
proto.RegisterMessage.prototype.setFacebookregister = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.RegisterMessage.oneofGroups_[0], value);
};


proto.RegisterMessage.prototype.clearFacebookregister = function() {
  this.setFacebookregister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RegisterMessage.prototype.hasFacebookregister = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
